{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b117d9cc",
   "metadata": {
    "papermill": {
     "duration": 0.013757,
     "end_time": "2024-04-18T19:38:29.364960",
     "exception": false,
     "start_time": "2024-04-18T19:38:29.351203",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Sentimental Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a63f8d1",
   "metadata": {
    "papermill": {
     "duration": 0.012896,
     "end_time": "2024-04-18T19:38:29.390809",
     "exception": false,
     "start_time": "2024-04-18T19:38:29.377913",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1e442cbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:29.419412Z",
     "iopub.status.busy": "2024-04-18T19:38:29.419022Z",
     "iopub.status.idle": "2024-04-18T19:38:30.250805Z",
     "shell.execute_reply": "2024-04-18T19:38:30.249847Z"
    },
    "papermill": {
     "duration": 0.84827,
     "end_time": "2024-04-18T19:38:30.253271",
     "exception": false,
     "start_time": "2024-04-18T19:38:29.405001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4c5014e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:30.281652Z",
     "iopub.status.busy": "2024-04-18T19:38:30.281251Z",
     "iopub.status.idle": "2024-04-18T19:38:34.681826Z",
     "shell.execute_reply": "2024-04-18T19:38:34.680817Z"
    },
    "papermill": {
     "duration": 4.416873,
     "end_time": "2024-04-18T19:38:34.684315",
     "exception": false,
     "start_time": "2024-04-18T19:38:30.267442",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/sentiment-analysis-dataset/training.1600000.processed.noemoticon.csv\" ,encoding='iso-8859-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d7bb7cae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:34.712667Z",
     "iopub.status.busy": "2024-04-18T19:38:34.712029Z",
     "iopub.status.idle": "2024-04-18T19:38:34.728337Z",
     "shell.execute_reply": "2024-04-18T19:38:34.727500Z"
    },
    "papermill": {
     "duration": 0.032393,
     "end_time": "2024-04-18T19:38:34.730220",
     "exception": false,
     "start_time": "2024-04-18T19:38:34.697827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>polarity of tweet</th>\n",
       "      <th>id of the tweet</th>\n",
       "      <th>date of the tweet</th>\n",
       "      <th>query</th>\n",
       "      <th>user</th>\n",
       "      <th>text of the tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1467810672</td>\n",
       "      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>scotthamilton</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1467810917</td>\n",
       "      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>mattycus</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1467811184</td>\n",
       "      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>ElleCTF</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1467811193</td>\n",
       "      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>Karoli</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1467811372</td>\n",
       "      <td>Mon Apr 06 22:20:00 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>joy_wolf</td>\n",
       "      <td>@Kwesidei not the whole crew</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   polarity of tweet   id of the tweet             date of the tweet  \\\n",
       "0                   0       1467810672  Mon Apr 06 22:19:49 PDT 2009   \n",
       "1                   0       1467810917  Mon Apr 06 22:19:53 PDT 2009   \n",
       "2                   0       1467811184  Mon Apr 06 22:19:57 PDT 2009   \n",
       "3                   0       1467811193  Mon Apr 06 22:19:57 PDT 2009   \n",
       "4                   0       1467811372  Mon Apr 06 22:20:00 PDT 2009   \n",
       "\n",
       "      query           user                                 text of the tweet   \n",
       "0  NO_QUERY  scotthamilton  is upset that he can't update his Facebook by ...  \n",
       "1  NO_QUERY       mattycus  @Kenichan I dived many times for the ball. Man...  \n",
       "2  NO_QUERY        ElleCTF    my whole body feels itchy and like its on fire   \n",
       "3  NO_QUERY         Karoli  @nationwideclass no, it's not behaving at all....  \n",
       "4  NO_QUERY       joy_wolf                      @Kwesidei not the whole crew   "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dc41e957",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:34.757840Z",
     "iopub.status.busy": "2024-04-18T19:38:34.757594Z",
     "iopub.status.idle": "2024-04-18T19:38:35.192262Z",
     "shell.execute_reply": "2024-04-18T19:38:35.190571Z"
    },
    "papermill": {
     "duration": 0.450969,
     "end_time": "2024-04-18T19:38:35.194582",
     "exception": false,
     "start_time": "2024-04-18T19:38:34.743613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1048572 entries, 0 to 1048571\n",
      "Data columns (total 6 columns):\n",
      " #   Column              Non-Null Count    Dtype \n",
      "---  ------              --------------    ----- \n",
      " 0   polarity of tweet   1048572 non-null  int64 \n",
      " 1   id of the tweet     1048572 non-null  int64 \n",
      " 2   date of the tweet   1048572 non-null  object\n",
      " 3   query               1048572 non-null  object\n",
      " 4   user                1048572 non-null  object\n",
      " 5   text of the tweet   1048572 non-null  object\n",
      "dtypes: int64(2), object(4)\n",
      "memory usage: 48.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "09f1d9ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:35.223666Z",
     "iopub.status.busy": "2024-04-18T19:38:35.223371Z",
     "iopub.status.idle": "2024-04-18T19:38:35.282336Z",
     "shell.execute_reply": "2024-04-18T19:38:35.281370Z"
    },
    "papermill": {
     "duration": 0.075283,
     "end_time": "2024-04-18T19:38:35.284510",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.209227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>polarity of tweet</th>\n",
       "      <th>id of the tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.048572e+06</td>\n",
       "      <td>1.048572e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9.482458e-01</td>\n",
       "      <td>1.976168e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.701122e+00</td>\n",
       "      <td>2.300567e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.467811e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.824526e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.990870e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.198903e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>2.329206e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       polarity of tweet   id of the tweet\n",
       "count        1.048572e+06     1.048572e+06\n",
       "mean         9.482458e-01     1.976168e+09\n",
       "std          1.701122e+00     2.300567e+08\n",
       "min          0.000000e+00     1.467811e+09\n",
       "25%          0.000000e+00     1.824526e+09\n",
       "50%          0.000000e+00     1.990870e+09\n",
       "75%          0.000000e+00     2.198903e+09\n",
       "max          4.000000e+00     2.329206e+09"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7e76e47d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:35.313522Z",
     "iopub.status.busy": "2024-04-18T19:38:35.313226Z",
     "iopub.status.idle": "2024-04-18T19:38:35.318530Z",
     "shell.execute_reply": "2024-04-18T19:38:35.317678Z"
    },
    "papermill": {
     "duration": 0.022258,
     "end_time": "2024-04-18T19:38:35.320541",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.298283",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1048572, 6)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39b40dbe",
   "metadata": {
    "papermill": {
     "duration": 0.013404,
     "end_time": "2024-04-18T19:38:35.347766",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.334362",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "61dbb934",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:35.377049Z",
     "iopub.status.busy": "2024-04-18T19:38:35.376385Z",
     "iopub.status.idle": "2024-04-18T19:38:35.784162Z",
     "shell.execute_reply": "2024-04-18T19:38:35.783300Z"
    },
    "papermill": {
     "duration": 0.42452,
     "end_time": "2024-04-18T19:38:35.786400",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.361880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[feature for feature in df.columns if df[feature].isnull().sum()>=1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2522cb7",
   "metadata": {
    "papermill": {
     "duration": 0.013975,
     "end_time": "2024-04-18T19:38:35.814515",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.800540",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Insights from dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c9c1027c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:35.844934Z",
     "iopub.status.busy": "2024-04-18T19:38:35.844102Z",
     "iopub.status.idle": "2024-04-18T19:38:35.849958Z",
     "shell.execute_reply": "2024-04-18T19:38:35.848904Z"
    },
    "papermill": {
     "duration": 0.023915,
     "end_time": "2024-04-18T19:38:35.852627",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.828712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['polarity of tweet ', 'id of the tweet', 'date of the tweet', 'query',\n",
      "       'user', 'text of the tweet '],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df.columns)\n",
    "df.columns = df.columns.str.strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2eeb5f78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:35.883627Z",
     "iopub.status.busy": "2024-04-18T19:38:35.883375Z",
     "iopub.status.idle": "2024-04-18T19:38:35.900208Z",
     "shell.execute_reply": "2024-04-18T19:38:35.899372Z"
    },
    "papermill": {
     "duration": 0.034178,
     "end_time": "2024-04-18T19:38:35.902464",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.868286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "polarity of tweet\n",
       "0    799996\n",
       "4    248576\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# different classes of target label\n",
    "df['polarity of tweet'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "839f4daa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:35.932056Z",
     "iopub.status.busy": "2024-04-18T19:38:35.931799Z",
     "iopub.status.idle": "2024-04-18T19:38:35.941672Z",
     "shell.execute_reply": "2024-04-18T19:38:35.940895Z"
    },
    "papermill": {
     "duration": 0.026349,
     "end_time": "2024-04-18T19:38:35.943590",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.917241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>polarity of tweet</th>\n",
       "      <th>id of the tweet</th>\n",
       "      <th>date of the tweet</th>\n",
       "      <th>query</th>\n",
       "      <th>user</th>\n",
       "      <th>text of the tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1467810672</td>\n",
       "      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>scotthamilton</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1467810917</td>\n",
       "      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>mattycus</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   polarity of tweet  id of the tweet             date of the tweet     query  \\\n",
       "0                  0       1467810672  Mon Apr 06 22:19:49 PDT 2009  NO_QUERY   \n",
       "1                  0       1467810917  Mon Apr 06 22:19:53 PDT 2009  NO_QUERY   \n",
       "\n",
       "            user                                  text of the tweet  \n",
       "0  scotthamilton  is upset that he can't update his Facebook by ...  \n",
       "1       mattycus  @Kenichan I dived many times for the ball. Man...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# which columns are not important remove them \n",
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "518b290b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:35.973432Z",
     "iopub.status.busy": "2024-04-18T19:38:35.973134Z",
     "iopub.status.idle": "2024-04-18T19:38:36.002658Z",
     "shell.execute_reply": "2024-04-18T19:38:36.001895Z"
    },
    "papermill": {
     "duration": 0.047064,
     "end_time": "2024-04-18T19:38:36.004831",
     "exception": false,
     "start_time": "2024-04-18T19:38:35.957767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# except polarity of tweet and text of the tweet all other are not important column to us for sentimental analysis\n",
    "df.drop(columns=['id of the tweet' , 'date of the tweet' , 'query' , 'user'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ed62f995",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.035009Z",
     "iopub.status.busy": "2024-04-18T19:38:36.034652Z",
     "iopub.status.idle": "2024-04-18T19:38:36.043332Z",
     "shell.execute_reply": "2024-04-18T19:38:36.042399Z"
    },
    "papermill": {
     "duration": 0.025588,
     "end_time": "2024-04-18T19:38:36.045162",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.019574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>polarity of tweet</th>\n",
       "      <th>text of the tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   polarity of tweet                                  text of the tweet\n",
       "0                  0  is upset that he can't update his Facebook by ...\n",
       "1                  0  @Kenichan I dived many times for the ball. Man..."
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58b4e9e7",
   "metadata": {
    "papermill": {
     "duration": 0.014368,
     "end_time": "2024-04-18T19:38:36.074252",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.059884",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Imbalanced dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7bf5cb5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.103724Z",
     "iopub.status.busy": "2024-04-18T19:38:36.103459Z",
     "iopub.status.idle": "2024-04-18T19:38:36.118798Z",
     "shell.execute_reply": "2024-04-18T19:38:36.118002Z"
    },
    "papermill": {
     "duration": 0.032069,
     "end_time": "2024-04-18T19:38:36.120660",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.088591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "polarity of tweet\n",
       "0    799996\n",
       "4    248576\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['polarity of tweet'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "deb65464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.150333Z",
     "iopub.status.busy": "2024-04-18T19:38:36.150032Z",
     "iopub.status.idle": "2024-04-18T19:38:36.153618Z",
     "shell.execute_reply": "2024-04-18T19:38:36.152898Z"
    },
    "papermill": {
     "duration": 0.020654,
     "end_time": "2024-04-18T19:38:36.155452",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.134798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # spliting the data into independent feature and target label\n",
    "# X = df['text of the tweet']\n",
    "# Y = df['polarity of tweet']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c29bafe2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.186542Z",
     "iopub.status.busy": "2024-04-18T19:38:36.186214Z",
     "iopub.status.idle": "2024-04-18T19:38:36.190119Z",
     "shell.execute_reply": "2024-04-18T19:38:36.189304Z"
    },
    "papermill": {
     "duration": 0.022294,
     "end_time": "2024-04-18T19:38:36.192200",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.169906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Implementing Oversampling for Handling Imbalanced \n",
    "# from imblearn.combine import SMOTETomek\n",
    "# smk = SMOTETomek(random_state=42)\n",
    "# X_res,y_res=smk.fit_resample(X,Y)\n",
    "\n",
    "\n",
    "\n",
    "# from collections import Counter\n",
    "# print('Original dataset shape {}'.format(Counter(Y)))\n",
    "# print('Resampled dataset shape {}'.format(Counter(y_res)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "017995cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.222840Z",
     "iopub.status.busy": "2024-04-18T19:38:36.222542Z",
     "iopub.status.idle": "2024-04-18T19:38:36.226236Z",
     "shell.execute_reply": "2024-04-18T19:38:36.225460Z"
    },
    "papermill": {
     "duration": 0.020976,
     "end_time": "2024-04-18T19:38:36.227990",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.207014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Y_bal.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3c0536e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.297872Z",
     "iopub.status.busy": "2024-04-18T19:38:36.297521Z",
     "iopub.status.idle": "2024-04-18T19:38:36.301611Z",
     "shell.execute_reply": "2024-04-18T19:38:36.300807Z"
    },
    "papermill": {
     "duration": 0.061122,
     "end_time": "2024-04-18T19:38:36.303556",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.242434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# we will doing down sampling in this case"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb19751d",
   "metadata": {
    "papermill": {
     "duration": 0.01436,
     "end_time": "2024-04-18T19:38:36.333426",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.319066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### \n",
    "\n",
    "Machine Learning Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "be5d68d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.364332Z",
     "iopub.status.busy": "2024-04-18T19:38:36.363997Z",
     "iopub.status.idle": "2024-04-18T19:38:36.367963Z",
     "shell.execute_reply": "2024-04-18T19:38:36.367170Z"
    },
    "papermill": {
     "duration": 0.021641,
     "end_time": "2024-04-18T19:38:36.369877",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.348236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Supervised Learning -> Neural Network in tensorflow , NLP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8beb008",
   "metadata": {
    "papermill": {
     "duration": 0.014659,
     "end_time": "2024-04-18T19:38:36.399615",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.384956",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Preprocess the text data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4400879c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.431164Z",
     "iopub.status.busy": "2024-04-18T19:38:36.430876Z",
     "iopub.status.idle": "2024-04-18T19:38:36.434647Z",
     "shell.execute_reply": "2024-04-18T19:38:36.433841Z"
    },
    "papermill": {
     "duration": 0.022304,
     "end_time": "2024-04-18T19:38:36.436558",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.414254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !pip install nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2ca87bb6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.467424Z",
     "iopub.status.busy": "2024-04-18T19:38:36.467181Z",
     "iopub.status.idle": "2024-04-18T19:38:36.475621Z",
     "shell.execute_reply": "2024-04-18T19:38:36.474703Z"
    },
    "papermill": {
     "duration": 0.026293,
     "end_time": "2024-04-18T19:38:36.477919",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.451626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>polarity of tweet</th>\n",
       "      <th>text of the tweet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   polarity of tweet                                  text of the tweet\n",
       "0                  0  is upset that he can't update his Facebook by ...\n",
       "1                  0  @Kenichan I dived many times for the ball. Man..."
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bac2a944",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:36.511737Z",
     "iopub.status.busy": "2024-04-18T19:38:36.511401Z",
     "iopub.status.idle": "2024-04-18T19:38:38.487590Z",
     "shell.execute_reply": "2024-04-18T19:38:38.486775Z"
    },
    "papermill": {
     "duration": 1.994394,
     "end_time": "2024-04-18T19:38:38.489827",
     "exception": false,
     "start_time": "2024-04-18T19:38:36.495433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7cb6a50c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:38.522074Z",
     "iopub.status.busy": "2024-04-18T19:38:38.521295Z",
     "iopub.status.idle": "2024-04-18T19:38:38.527227Z",
     "shell.execute_reply": "2024-04-18T19:38:38.526369Z"
    },
    "papermill": {
     "duration": 0.024245,
     "end_time": "2024-04-18T19:38:38.529369",
     "exception": false,
     "start_time": "2024-04-18T19:38:38.505124",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'@Kenichan I dived many times for the ball. Managed to save 50%  The rest go out of bounds'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['text of the tweet'][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "448c5769",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:38.562503Z",
     "iopub.status.busy": "2024-04-18T19:38:38.562125Z",
     "iopub.status.idle": "2024-04-18T19:38:38.639313Z",
     "shell.execute_reply": "2024-04-18T19:38:38.638366Z"
    },
    "papermill": {
     "duration": 0.096491,
     "end_time": "2024-04-18T19:38:38.641241",
     "exception": false,
     "start_time": "2024-04-18T19:38:38.544750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a0864a21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:38.672748Z",
     "iopub.status.busy": "2024-04-18T19:38:38.672254Z",
     "iopub.status.idle": "2024-04-18T19:38:38.679619Z",
     "shell.execute_reply": "2024-04-18T19:38:38.678618Z"
    },
    "papermill": {
     "duration": 0.025202,
     "end_time": "2024-04-18T19:38:38.681573",
     "exception": false,
     "start_time": "2024-04-18T19:38:38.656371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn', \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\"]\n"
     ]
    }
   ],
   "source": [
    "from nltk.corpus import stopwords\n",
    "print(stopwords.words('english'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "80e1f4fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:38.712992Z",
     "iopub.status.busy": "2024-04-18T19:38:38.712684Z",
     "iopub.status.idle": "2024-04-18T19:38:38.719404Z",
     "shell.execute_reply": "2024-04-18T19:38:38.718420Z"
    },
    "papermill": {
     "duration": 0.024569,
     "end_time": "2024-04-18T19:38:38.721225",
     "exception": false,
     "start_time": "2024-04-18T19:38:38.696656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "179\n",
      "not\n",
      "don't\n",
      "aren't\n",
      "couldn't\n",
      "didn't\n",
      "doesn't\n",
      "hadn't\n",
      "hasn't\n",
      "haven't\n",
      "isn't\n",
      "mightn't\n",
      "mustn't\n",
      "needn't\n",
      "shan't\n",
      "shouldn't\n",
      "wasn't\n",
      "weren't\n",
      "won't\n",
      "wouldn't\n"
     ]
    }
   ],
   "source": [
    "removed = []\n",
    "stopword = stopwords.words('english')\n",
    "print(len(stopword))\n",
    "for i in stopword:\n",
    "    if \"n't\" in i:\n",
    "        # print(i)\n",
    "        removed.append(i)\n",
    "    if i == \"not\":\n",
    "        # print(i)\n",
    "        removed.append(i)\n",
    "for i in removed:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "364ac277",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:38.753571Z",
     "iopub.status.busy": "2024-04-18T19:38:38.753261Z",
     "iopub.status.idle": "2024-04-18T19:38:38.757377Z",
     "shell.execute_reply": "2024-04-18T19:38:38.756514Z"
    },
    "papermill": {
     "duration": 0.022149,
     "end_time": "2024-04-18T19:38:38.759139",
     "exception": false,
     "start_time": "2024-04-18T19:38:38.736990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in removed:\n",
    "    stopword.remove(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "fda00e51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:38.790173Z",
     "iopub.status.busy": "2024-04-18T19:38:38.789844Z",
     "iopub.status.idle": "2024-04-18T19:38:38.794341Z",
     "shell.execute_reply": "2024-04-18T19:38:38.793519Z"
    },
    "papermill": {
     "duration": 0.02217,
     "end_time": "2024-04-18T19:38:38.796292",
     "exception": false,
     "start_time": "2024-04-18T19:38:38.774122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', 'couldn', 'didn', 'doesn', 'hadn', 'hasn', 'haven', 'isn', 'ma', 'mightn', 'mustn', 'needn', 'shan', 'shouldn', 'wasn', 'weren', 'won', 'wouldn']\n",
      "160\n"
     ]
    }
   ],
   "source": [
    "print(stopword)\n",
    "print(len(stopword))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f28a1957",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:38.827720Z",
     "iopub.status.busy": "2024-04-18T19:38:38.827469Z",
     "iopub.status.idle": "2024-04-18T19:38:38.890973Z",
     "shell.execute_reply": "2024-04-18T19:38:38.890026Z"
    },
    "papermill": {
     "duration": 0.081299,
     "end_time": "2024-04-18T19:38:38.892964",
     "exception": false,
     "start_time": "2024-04-18T19:38:38.811665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to /usr/share/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('wordnet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "be806e49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:38.925656Z",
     "iopub.status.busy": "2024-04-18T19:38:38.925340Z",
     "iopub.status.idle": "2024-04-18T19:38:40.183874Z",
     "shell.execute_reply": "2024-04-18T19:38:40.182722Z"
    },
    "papermill": {
     "duration": 1.277228,
     "end_time": "2024-04-18T19:38:40.186052",
     "exception": false,
     "start_time": "2024-04-18T19:38:38.908824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Archive:  /usr/share/nltk_data/corpora/wordnet.zip\r\n",
      "   creating: /usr/share/nltk_data/corpora/wordnet/\r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/lexnames  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.verb  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.adv  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/adv.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.verb  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/cntlist.rev  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.adj  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.adj  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/LICENSE  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/citation.bib  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/noun.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/verb.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/README  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.sense  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.noun  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.adv  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.noun  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/adj.exc  \r\n"
     ]
    }
   ],
   "source": [
    "!unzip /usr/share/nltk_data/corpora/wordnet.zip -d /usr/share/nltk_data/corpora/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f26861a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:40.223218Z",
     "iopub.status.busy": "2024-04-18T19:38:40.222380Z",
     "iopub.status.idle": "2024-04-18T19:38:40.229252Z",
     "shell.execute_reply": "2024-04-18T19:38:40.228410Z"
    },
    "papermill": {
     "duration": 0.027631,
     "end_time": "2024-04-18T19:38:40.231201",
     "exception": false,
     "start_time": "2024-04-18T19:38:40.203570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['polarity of tweet', 'text of the tweet'], dtype='object')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "389fb7e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:40.265354Z",
     "iopub.status.busy": "2024-04-18T19:38:40.264802Z",
     "iopub.status.idle": "2024-04-18T19:38:40.271434Z",
     "shell.execute_reply": "2024-04-18T19:38:40.270540Z"
    },
    "papermill": {
     "duration": 0.026107,
     "end_time": "2024-04-18T19:38:40.273545",
     "exception": false,
     "start_time": "2024-04-18T19:38:40.247438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import re\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "def preprocess(content):\n",
    "    # sentence = nltk.sent_tokenize(i)\n",
    "    sentence = re.sub(r'[^a-zA-Z\\']',' ',content)\n",
    "    sentence = re.sub(r'\\s+', ' ', sentence).strip()\n",
    "    sentence = sentence.lower()\n",
    "    # sentence = nltk.word_tokenize(sentence)\n",
    "    sentence = sentence.split()\n",
    "    sentence = [lemmatizer.lemmatize(word) for word in sentence if not word in stopword]\n",
    "    sentence = ' '.join(sentence)\n",
    "    return sentence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f1198488",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:38:40.307410Z",
     "iopub.status.busy": "2024-04-18T19:38:40.307134Z",
     "iopub.status.idle": "2024-04-18T19:40:17.101040Z",
     "shell.execute_reply": "2024-04-18T19:40:17.099979Z"
    },
    "papermill": {
     "duration": 96.81369,
     "end_time": "2024-04-18T19:40:17.103727",
     "exception": false,
     "start_time": "2024-04-18T19:38:40.290037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['preprocess_data'] = df['text of the tweet'].apply(preprocess)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "582ea4f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:17.139583Z",
     "iopub.status.busy": "2024-04-18T19:40:17.139265Z",
     "iopub.status.idle": "2024-04-18T19:40:17.149832Z",
     "shell.execute_reply": "2024-04-18T19:40:17.148821Z"
    },
    "papermill": {
     "duration": 0.030387,
     "end_time": "2024-04-18T19:40:17.151846",
     "exception": false,
     "start_time": "2024-04-18T19:40:17.121459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>polarity of tweet</th>\n",
       "      <th>text of the tweet</th>\n",
       "      <th>preprocess_data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "      <td>upset can't update facebook texting might cry ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "      <td>kenichan dived many time ball managed save res...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>whole body feel itchy like fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>nationwideclass not behaving i'm mad can't see</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>@Kwesidei not the whole crew</td>\n",
       "      <td>kwesidei not whole crew</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   polarity of tweet                                  text of the tweet  \\\n",
       "0                  0  is upset that he can't update his Facebook by ...   \n",
       "1                  0  @Kenichan I dived many times for the ball. Man...   \n",
       "2                  0    my whole body feels itchy and like its on fire    \n",
       "3                  0  @nationwideclass no, it's not behaving at all....   \n",
       "4                  0                      @Kwesidei not the whole crew    \n",
       "\n",
       "                                     preprocess_data  \n",
       "0  upset can't update facebook texting might cry ...  \n",
       "1  kenichan dived many time ball managed save res...  \n",
       "2                    whole body feel itchy like fire  \n",
       "3     nationwideclass not behaving i'm mad can't see  \n",
       "4                            kwesidei not whole crew  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7e3dd4ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:17.187136Z",
     "iopub.status.busy": "2024-04-18T19:40:17.186826Z",
     "iopub.status.idle": "2024-04-18T19:40:17.192805Z",
     "shell.execute_reply": "2024-04-18T19:40:17.191878Z"
    },
    "papermill": {
     "duration": 0.025824,
     "end_time": "2024-04-18T19:40:17.194776",
     "exception": false,
     "start_time": "2024-04-18T19:40:17.168952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"upset can't update facebook texting might cry result school today also blah\""
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['preprocess_data'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "578ab620",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:17.229223Z",
     "iopub.status.busy": "2024-04-18T19:40:17.228881Z",
     "iopub.status.idle": "2024-04-18T19:40:17.234680Z",
     "shell.execute_reply": "2024-04-18T19:40:17.233866Z"
    },
    "papermill": {
     "duration": 0.025024,
     "end_time": "2024-04-18T19:40:17.236507",
     "exception": false,
     "start_time": "2024-04-18T19:40:17.211483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"is upset that he can't update his Facebook by texting it... and might cry as a result  School today also. Blah!\""
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['text of the tweet'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2f913496",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:17.269941Z",
     "iopub.status.busy": "2024-04-18T19:40:17.269644Z",
     "iopub.status.idle": "2024-04-18T19:40:17.273507Z",
     "shell.execute_reply": "2024-04-18T19:40:17.272653Z"
    },
    "papermill": {
     "duration": 0.022758,
     "end_time": "2024-04-18T19:40:17.275400",
     "exception": false,
     "start_time": "2024-04-18T19:40:17.252642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df['text of the tweet'].values\n",
    "Y = df['polarity of tweet'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a9c5f7b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:17.309107Z",
     "iopub.status.busy": "2024-04-18T19:40:17.308466Z",
     "iopub.status.idle": "2024-04-18T19:40:39.011625Z",
     "shell.execute_reply": "2024-04-18T19:40:39.010542Z"
    },
    "papermill": {
     "duration": 21.722901,
     "end_time": "2024-04-18T19:40:39.014484",
     "exception": false,
     "start_time": "2024-04-18T19:40:17.291583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "tfid = TfidfVectorizer()\n",
    "Xt = tfid.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "fedaa7b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:39.051580Z",
     "iopub.status.busy": "2024-04-18T19:40:39.051256Z",
     "iopub.status.idle": "2024-04-18T19:40:39.055574Z",
     "shell.execute_reply": "2024-04-18T19:40:39.054600Z"
    },
    "papermill": {
     "duration": 0.02544,
     "end_time": "2024-04-18T19:40:39.057871",
     "exception": false,
     "start_time": "2024-04-18T19:40:39.032431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# # Implementing Oversampling for Handling Imbalanced \n",
    "# from imblearn.combine import SMOTETomek\n",
    "# smk = SMOTETomek(random_state=42)\n",
    "# X_res,y_res=smk.fit_resample(X,Y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "7647f267",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:39.094204Z",
     "iopub.status.busy": "2024-04-18T19:40:39.093843Z",
     "iopub.status.idle": "2024-04-18T19:40:39.097857Z",
     "shell.execute_reply": "2024-04-18T19:40:39.097008Z"
    },
    "papermill": {
     "duration": 0.024094,
     "end_time": "2024-04-18T19:40:39.099816",
     "exception": false,
     "start_time": "2024-04-18T19:40:39.075722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from collections import Counter\n",
    "# print('Original dataset shape {}'.format(Counter(Y)))\n",
    "# print('Resampled dataset shape {}'.format(Counter(y_res)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "dde1d88e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:39.135606Z",
     "iopub.status.busy": "2024-04-18T19:40:39.135318Z",
     "iopub.status.idle": "2024-04-18T19:40:39.735286Z",
     "shell.execute_reply": "2024-04-18T19:40:39.734367Z"
    },
    "papermill": {
     "duration": 0.620835,
     "end_time": "2024-04-18T19:40:39.737636",
     "exception": false,
     "start_time": "2024-04-18T19:40:39.116801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "## split train and test data\n",
    "X_train,X_test,Y_train,Y_test = train_test_split(Xt,Y,test_size=0.2,stratify=Y,random_state=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "c5be7ad6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:40:39.772945Z",
     "iopub.status.busy": "2024-04-18T19:40:39.772596Z",
     "iopub.status.idle": "2024-04-18T19:41:10.088757Z",
     "shell.execute_reply": "2024-04-18T19:41:10.087452Z"
    },
    "papermill": {
     "duration": 30.360404,
     "end_time": "2024-04-18T19:41:10.114904",
     "exception": false,
     "start_time": "2024-04-18T19:40:39.754500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "model = LogisticRegression(max_iter=100)\n",
    "model.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d0a47b6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:41:10.165859Z",
     "iopub.status.busy": "2024-04-18T19:41:10.165236Z",
     "iopub.status.idle": "2024-04-18T19:41:10.181432Z",
     "shell.execute_reply": "2024-04-18T19:41:10.180616Z"
    },
    "papermill": {
     "duration": 0.036998,
     "end_time": "2024-04-18T19:41:10.183599",
     "exception": false,
     "start_time": "2024-04-18T19:41:10.146601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "15edbe46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:41:10.220136Z",
     "iopub.status.busy": "2024-04-18T19:41:10.219429Z",
     "iopub.status.idle": "2024-04-18T19:41:10.589961Z",
     "shell.execute_reply": "2024-04-18T19:41:10.588957Z"
    },
    "papermill": {
     "duration": 0.391157,
     "end_time": "2024-04-18T19:41:10.592371",
     "exception": false,
     "start_time": "2024-04-18T19:41:10.201214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.87      0.94      0.91    160000\n",
      "           4       0.76      0.55      0.64     49715\n",
      "\n",
      "    accuracy                           0.85    209715\n",
      "   macro avg       0.82      0.75      0.77    209715\n",
      "weighted avg       0.85      0.85      0.84    209715\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Showing Model Summary\n",
    "from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n",
    "print('Classification Report:\\n', classification_report(Y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3509a7f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:41:10.630071Z",
     "iopub.status.busy": "2024-04-18T19:41:10.629732Z",
     "iopub.status.idle": "2024-04-18T19:41:11.104824Z",
     "shell.execute_reply": "2024-04-18T19:41:11.103933Z"
    },
    "papermill": {
     "duration": 0.496401,
     "end_time": "2024-04-18T19:41:11.107058",
     "exception": false,
     "start_time": "2024-04-18T19:41:10.610657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fe19d0cbdf0>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing Model Results\n",
    "t1 = ConfusionMatrixDisplay(confusion_matrix(Y_test, y_pred))\n",
    "t1.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b0bfdd05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:41:11.143713Z",
     "iopub.status.busy": "2024-04-18T19:41:11.143420Z",
     "iopub.status.idle": "2024-04-18T19:41:11.148504Z",
     "shell.execute_reply": "2024-04-18T19:41:11.147602Z"
    },
    "papermill": {
     "duration": 0.025272,
     "end_time": "2024-04-18T19:41:11.150406",
     "exception": false,
     "start_time": "2024-04-18T19:41:11.125134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "stellargirl loooooooovvvvvveee kindle not dx cool fantastic right\n"
     ]
    }
   ],
   "source": [
    "content = \"@stellargirl I loooooooovvvvvveee my Kindle2. Not that the DX is cool, but the 2 is fantastic in its own right\"\n",
    "preprocessed_content = preprocess(content)\n",
    "print(preprocessed_content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e14f6908",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-18T19:41:11.186932Z",
     "iopub.status.busy": "2024-04-18T19:41:11.186606Z",
     "iopub.status.idle": "2024-04-18T19:41:11.197927Z",
     "shell.execute_reply": "2024-04-18T19:41:11.197048Z"
    },
    "papermill": {
     "duration": 0.032102,
     "end_time": "2024-04-18T19:41:11.199797",
     "exception": false,
     "start_time": "2024-04-18T19:41:11.167695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final = tfid.transform([preprocessed_content])\n",
    "model.predict(final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c8faf6b",
   "metadata": {
    "papermill": {
     "duration": 0.017143,
     "end_time": "2024-04-18T19:41:11.234574",
     "exception": false,
     "start_time": "2024-04-18T19:41:11.217431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 989445,
     "sourceId": 1808590,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 165.901297,
   "end_time": "2024-04-18T19:41:12.272246",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-18T19:38:26.370949",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
